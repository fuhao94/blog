(window.webpackJsonp=window.webpackJsonp||[]).push([[43],{615:function(t,a,r){"use strict";r.r(a);var e=r(13),s=Object(e.a)({},(function(){var t=this,a=t.$createElement,r=t._self._c||a;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h2",{attrs:{id:"不可变数据的好处"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#不可变数据的好处"}},[t._v("#")]),t._v(" 不可变数据的好处")]),t._v(" "),r("h3",{attrs:{id:"简化复杂的功能"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#简化复杂的功能"}},[t._v("#")]),t._v(" 简化复杂的功能")]),t._v(" "),r("p",[t._v("不可变性使得复杂的特性更容易实现。撤销和恢复功能在开发中是一个很常见的需求。不直接在数据上修改可以让我们追溯并复用历史记录。")]),t._v(" "),r("h3",{attrs:{id:"跟踪数据的改变"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#跟踪数据的改变"}},[t._v("#")]),t._v(" 跟踪数据的改变")]),t._v(" "),r("p",[t._v("如果直接修改数据，那么就很难跟踪到数据的改变。跟踪数据的改变需要可变对象可以与改变之前的版本进行对比，这样整个对象树都需要被遍历一次。")]),t._v(" "),r("p",[t._v("跟踪不可变数据的变化相对来说就容易多了。如果发现对象变成了一个新对象，那么我们就可以说对象发生改变了。")]),t._v(" "),r("h3",{attrs:{id:"确定在-react-中何时重新渲染"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#确定在-react-中何时重新渲染"}},[t._v("#")]),t._v(" 确定在 React 中何时重新渲染")]),t._v(" "),r("p",[t._v("不可变性最主要的优势在于它可以帮助我们在 React 中创建 pure components。我们可以很轻松的确定不可变数据是否发生了改变，从而确定何时对组件进行重新渲染。")])])}),[],!1,null,null,null);a.default=s.exports}}]);